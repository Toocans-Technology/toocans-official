// import { Button, Stack } from "@mui/material";
// import Link from "next/link";

// import CustomTextField from "@/app/components/forms/theme-elements/CustomTextField";
// import CustomFormLabel from "@/app/components/forms/theme-elements/CustomFormLabel";

// export default function AuthForgotPassword(){
//  return (
//   <>
//     <Stack mt={4} spacing={2}>
//       <CustomFormLabel htmlFor="reset-email">Email Adddress</CustomFormLabel>
//       <CustomTextField id="reset-email" variant="outlined" fullWidth />

//       <Button
//         color="primary"
//         variant="contained"
//         size="large"
//         fullWidth
//         component={Link}
//         href="/"
//       >
//         Forgot Password
//       </Button>
//       <Button
//         color="primary"
//         size="large"
//         fullWidth
//         component={Link}
//         href="/auth/auth1/login"
//       >
//         Back to Login
//       </Button>
//     </Stack>
//   </>
// )};

import React, { useState, useEffect, useRef } from 'react';
import {
  Box,
  Typography,
  FormGroup,
  FormControlLabel,
  Button,
  Stack,
  Divider,
  InputAdornment,
  MenuItem,
  Autocomplete,
  TextField,
  Popover
} from "@mui/material";
import Link from "next/link";
import { loginType } from "@/app/(DashboardLayout)/types/auth/auth";
import CustomCheckbox from "@/app/components/forms/theme-elements/CustomCheckbox";
import CustomTextField from "@/app/components/forms/theme-elements/CustomTextField";
import CustomFormLabel from "@/app/components/forms/theme-elements/CustomFormLabel";
import AuthSocialButtons from "./AuthSocialButtons";
import VisibilityOutlinedIcon from '@mui/icons-material/VisibilityOutlined';
import VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';
import AuthTwoSteps from "./AuthTwoSteps";
interface Country {
  countryEnName?: string;
  countryName?: string;
  created?: number;
  customOrder?: string;
  domainShortName?: string;
  id?: number;
  nationalCode?: string;
  status?: number;
}

interface Response {
  code?: number;
  data?: Country[];
  msg?: string;
}

const AuthForgotPassword = ({ title, subtitle, subtext }: loginType) => {
  const [countdown, setCountdown] = useState<number>(0);
  const [loginType, setLoginType] = useState<'email' | 'phone'>('email');
  const [loginMode, setLoginMode] = useState<'code' | 'password'>('code');
  const [showPassword, setShowPassword] = useState(false);
  const [countryCodes, setCountryCodes] = useState<Country[]>([]);
  const [selectedCountry, setSelectedCountry] = useState<string>('');
  const [anchorEl, setAnchorEl] = React.useState<HTMLElement | null>(null);
  const [forgotPassword, setForgotPassword] = useState<boolean>(false);
  const timerRef = useRef<NodeJS.Timeout>();

  const handleNext = () =>{
    setForgotPassword(true);
    if (countdown === 0) {
      // Here you would add API call to send verification code
      console.log('Sending verification code...');

      // Start countdown
      setCountdown(60);

      const timer = setInterval(() => {
        setCountdown((prevCount) => {
          if (prevCount <= 1) {
            clearInterval(timer);
            return 0;
          }
          return prevCount - 1;
        });
      }, 1000);
    }


  }

  const handlePopoverOpen = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handlePopoverClose = () => {
    setAnchorEl(null);
  };

  const open = Boolean(anchorEl);
  useEffect(() => {
    const fetchCountryCodes = async () => {
      try {
        const response = await fetch('https://dev-api.bdy.tech/baseConfig/allSupportCountry', {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const responseData: Response = await response.json();
        console.log('API Response:', responseData);
        
        if (responseData.data && Array.isArray(responseData.data)) {
          const activeCountries = responseData.data.filter(country => country.status === 1);
          console.log('Active Countries:', activeCountries);
          
          setCountryCodes(activeCountries);
          
          if (activeCountries.length > 0) {
            setSelectedCountry(activeCountries[0].nationalCode || '');
          }
        } else {
          console.error('Invalid data format:', responseData);
        }
      } catch (error) {
        console.error('Error fetching country codes:', error);
      }
    };
    
    fetchCountryCodes();
  }, []);
  
  // Log state changes
  useEffect(() => {
    console.log('countryCodes state updated:', countryCodes);
  }, [countryCodes]);
  
  useEffect(() => {
    console.log('selectedCountry state updated:', selectedCountry);
  }, [selectedCountry]);



  return (
    <>
      {title ? (
        <Typography fontWeight="500" variant="h3" mb={2} color="#000">
          {title}
        </Typography>
      ) : null}

      {subtext}
      <Box sx={{
        width: { xs: '100%', sm: '432px' },
        boxShadow: '0px 4px 20px rgba(0, 0, 0, 0.2)',
        borderRadius: '16px',
        padding: '20px'

      }}>

        <Stack>
          {forgotPassword ? (
            <Box p={4}>
              <Typography variant="subtitle1" color="#666" mt={2} mb={1}>
                We sent a verification code to your {loginType === 'email' ? 'email' : 'mobile'}. Enter the code from the {loginType === 'email' ? 'email' : 'mobile'} in the field
                below.
              </Typography>
              {/* <Typography variant="subtitle1" fontWeight="700" mb={1}>
                ******1234
              </Typography> */}
              <AuthTwoSteps
              countdown={countdown}
              setCountdown={setCountdown}
              />
              </Box>
          ) : (
            <Box>
            <Box>
              <Box display="flex" gap={2} mb={1}>
                <Box 
                  onClick={() => setLoginType('email')} 
                  sx={{ 
                    cursor: 'pointer',
                    color: loginType === 'email' ? '#222' : '#666',
                    fontWeight: 500,
                    fontSize: '14px'
                  }}
                >
                  Email
                </Box>
                <Box 
                  onClick={() => setLoginType('phone')} 
                  sx={{ 
                    cursor: 'pointer',
                    color: loginType === 'phone' ? '#222' : '#666',
                    fontWeight: 500,
                    fontSize: '14px'
                  }}
                >
                  Phone
                </Box>
              </Box>
              {loginType === 'email' ? (
                <CustomTextField 
                  id="email" 
                  variant="outlined" 
                  fullWidth 
                  placeholder="Enter Email"
                  sx={{
                    '& .MuiOutlinedInput-notchedOutline': { border: 'none' },
                    '& .MuiOutlinedInput-root': {
                      background: '#f5f5f5',
                      borderRadius: '8px',
                      color: '#000'
                    }
                  }}
                />
              ) : (
                <Box sx={{ 
                  display: 'flex', 
                  gap: 1,
                  '& .MuiOutlinedInput-root': {
                    background: '#f5f5f5',
                    borderRadius: '8px',
                    border: 'none'
                  },
                  '& .MuiOutlinedInput-notchedOutline': { 
                    border: 'none' 
                  }
                }}>
                  <Autocomplete
                    value={countryCodes.find(c => c.nationalCode === selectedCountry) || null}
                    onChange={(_, newValue) => {
                      setSelectedCountry(newValue?.nationalCode || '');
                    }}
                    options={countryCodes}
                    getOptionLabel={(option) => `+${option.nationalCode}`}
                    ListboxProps={{
                      style: {
                        backgroundColor: '#fff',
                        color: '#000',
                        padding: '8px 0'
                      }
                    }}
                    PaperProps={{
                      sx: {
                        borderRadius: '8px',
                        boxShadow: '0 2px 8px rgba(0,0,0,0.15)',
                        marginTop: '4px'
                      }
                    }}
                    renderOption={(props, option) => (
                      <MenuItem {...props} key={option.id} sx={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px',
                        color: '#000',
                        backgroundColor: '#fff',
                        padding: '8px 16px',
                        '&:hover': {
                          backgroundColor: '#f5f5f5'
                        },
                        '&.Mui-focused': {
                          backgroundColor: '#f5f5f5',
                          color: '#000',
                          '&:hover': {
                            backgroundColor: '#f5f5f5',
                            color: '#000'
                          },
                          
                        },
                       
                      }}>
                        <img
                          src={`https://flagcdn.com/w20/${option.domainShortName?.toLowerCase()}.png`}
                          alt={option.countryEnName || ''}
                          style={{ 
                            width: '20px',
                            height: '15px',
                            objectFit: 'cover',
                            borderRadius: '2px',
                            
                          }}
                          loading="lazy"
                        />
                        +{option.nationalCode}
                      </MenuItem>
                    )}
                    renderInput={(params) => (
                      <Box sx={{ display: 'flex', alignItems: 'center', position: 'relative' }}>
                        {selectedCountry && countryCodes.find(c => c.nationalCode === selectedCountry) && (
                          <img
                            src={`https://flagcdn.com/w20/${countryCodes.find(c => c.nationalCode === selectedCountry)?.domainShortName?.toLowerCase()}.png`}
                            alt={countryCodes.find(c => c.nationalCode === selectedCountry)?.countryEnName || ''}
                            style={{ 
                              width: '20px',
                              height: '15px',
                              objectFit: 'cover',
                              borderRadius: '2px',
                              position: 'absolute',
                              left: '8px',
                              zIndex: 1
                            }}
                            loading="lazy"
                          />
                        )}
                        <TextField 
                          {...params} 
                          InputProps={{
                            ...params.InputProps,
                            sx: {
                              ...params.InputProps?.sx,
                              color: '#000',
                              paddingLeft: selectedCountry ? '32px !important' : '14px',
                              width: '130px',
                              height: '44px'
                            }
                          }}
                        />
                      </Box>
                    )}
                    disableClearable
                    size="small"
                  />
                  <CustomTextField 
                    id="phone" 
                    variant="outlined" 
                    fullWidth 
                    placeholder="Enter Phone Number"
                    sx={{
                      '& .MuiOutlinedInput-notchedOutline': { border: 'none' },
                      '& .MuiOutlinedInput-root': {
                        background: '#f5f5f5',
                        borderRadius: '8px',
                        color: '#000',
                        height: '44px',
                        '& input': {
                          height: '44px',
                          padding: '0 14px'
                        }
                      }
                    }}
                  />
                </Box>
              )}
            </Box>
            <Stack
              justifyContent="space-between"
              direction="row"
              alignItems="center"
              my={2}
              mb={4}
            >
              <Typography
                component={Link}
                href="/auth/login"
                fontWeight="500"
                sx={{
                  textDecoration: "none",
                  color: "#3C7BF4",
                  fontSize: '12px',
                  cursor: 'pointer'
                }}
              >
                Switch to password login
              </Typography>
  
  
              {countdown > 0 && <Typography
                component={Link}
                href="/auth/auth1/forgot-password"
                fontWeight="500"
                sx={{
                  textDecoration: "none",
                  color: "#A9A9A9",
                  fontSize: '12px'
                }}
                aria-owns={open ? 'mouse-over-popover' : undefined}
                aria-haspopup="true"
                onMouseEnter={handlePopoverOpen}
                onMouseLeave={handlePopoverClose}
              >
                
                {countdown > 0 ? "Not able to receive verification code?" : ""}
                {loginMode === 'code' ? "Forgot password" : ""}
              </Typography>}
              <Popover
                id="mouse-over-popover"
                sx={{ pointerEvents: 'none'}}
                open={open}
                anchorEl={anchorEl}
                anchorOrigin={{
                  vertical: 'bottom',
                  horizontal: 'left',
                }}
                transformOrigin={{
                  vertical: 'top',
                  horizontal: 'left',
                }}
                onClose={handlePopoverClose}
                disableRestoreFocus
              >
          <Typography sx={{ px: 2, py: 1, backgroundColor: '#FFF', width: '230px', color: '#000'    }}>
            Please try the following steps:
          <ul style={{ color: '#666', padding:'2px 6px', fontSize: '12px' }}>
            <li>
            Check if you are using the correct email address abc***@gmail.com
            </li>
            <li>
            If you are still unable to receive it, please check your spam folder.
            </li>
          </ul>
  
          </Typography>
        </Popover>
              
            </Stack>
            </Box>
          )}
         
        </Stack>
        {!forgotPassword && <Box mb={1}>
            <Button
            sx={{
              borderRadius: '36px',
              '&:hover': {
                bgcolor: '#8ce61c'
              }
            }}
            color="primary"
            variant="contained"
            size="large"
            fullWidth
            // component={Link}
            onClick={handleNext}
            // href="/"
            type="submit"
          >
            Next
          </Button>
        </Box>}
        
       
      </Box>
      {subtitle}
    </>
  );
};

export default AuthForgotPassword;
